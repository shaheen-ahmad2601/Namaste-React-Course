
/*
Header
 - Logo
 -Nav items

Body 
- search
- cartRestro container
  - Restro cart
    - img
    - name of restro , start ratings , cuisine , deleviry time


Footer
- Copyrights
- links
-adress
-contacts
*/

- config driven ui. - 
- ui layer + data layer -> makes frontend.
- to see the actual api and can be used also, goto network then priview and refresh the page you will get the data.
- we can take the json data and and can get the data in a single object or we can create the array of objects then we ca access that with index value , both approach is not good , we can also map our data to avoid the complexity of the code.

- whatever the data is you can use map funciton to loop through the data and can render it.

- we can also create react app with cdn links and just installing react and reactdom in our json file without installing it with proper setup 

- we can pass the key in the component res.data.id for unique key to render a list.
you have to always pass the key 

=> why you need to pass the key , lets suppose a new card comes in the array so react does not know which cart just came in the array or which one has been rendered so that is why we need to pass the key so that react can track the card ids , if you dont pass the key then react will rerender all the cards and it will hamper the performance of the app.

-> Container 
  - card-1
  - card-2
  - card-3
  - card-4

  here these cards is not having any keys , lets suppose a new card comes in the array so what react will do it will render all the cards becasue react does not know which card is new bcos noone is having the key , then react will rerender all the cards again and will impact the performance of the app.

  - map(res,index)- we can pass index as the key in 2nd parameter 
  key={index} this looks fine logically but react does not recommends this to use.

  - if there is no id in the data then we can use index as key



  ----------------------------------------Hooks lec-4------------------------------

  make a file stucture 
  use js or jsx extension doesnot matter both is being used to add functionality to the code.

  - there are two types of exports 
    - default export - I can export one time only 
    - named export - but for multiple value we can use named export, use curly braces{} to import named export


    react is having two layer
     - UI layer
     - data layer 
     if the data layer is having only two data so the ui will render 2 data cards only

     - React Hooks is normal js utility functions that enable the super power of hooks that we use , its a normal basic js code written with somw logic to perform some particular tasks

     => in node_modules the react code is exported react file then we import it like react form "react"
     => useState is exported as named function that is why we use like this {useState} from "react".

     - whenever a state variable updates react rerender the components.

     - It keeps your data layer sync with UI layer , it rerenders so fast that dom gets updated in a fraction of sections. and data layer and UI layer are works in sync.

     -----------------------Reconsilation algorithm------------------------

  => Reconsilation algorithm also known as React fiver.
  - In React, "reconciliation" refers to the process of updating the user interface (UI) to reflect changes in the underlying data or state. When you work with React, you typically describe how the UI should look based on the current state of your application, and React takes care of efficiently updating the actual DOM to match that description. This process of updating the DOM while minimizing unnecessary changes is what's known as reconciliation.

  - React uses a virtual DOM (VDOM) to optimize this process. Here's a simplified overview of how reconciliation works:

Render Phase: When changes occur in your application's state, React re-renders the component tree. However, instead of immediately updating the real DOM, it first creates a virtual representation of the DOM, known as the virtual DOM.

Reconciliation: React then compares the new virtual DOM with the previous virtual DOM (the one from the last render) using a "diffing" algorithm. This algorithm determines the differences or changes between the two virtual DOM trees. This process is also referred to as "diffing" or "reconciliation."

Update Phase: After identifying the differences, React calculates the most efficient way to update the real DOM to reflect these changes. It then applies the minimal set of changes needed to the actual DOM, rather than re-rendering the entire DOM tree.

By performing this process, React ensures that updates to the UI are both efficient and consistent with the application's current state, without causing unnecessary work for the browser.

Now, let's define the "diff algorithm" in more detail:

Diff Algorithm (Reconciliation Algorithm): The diff algorithm, or reconciliation algorithm, is a core part of React's virtual DOM system. Its primary purpose is to determine the minimal number of DOM manipulations required to update the real DOM to match the current virtual DOM representation.

Here's how the diffing algorithm works:

Tree Comparison: React compares the new virtual DOM tree with the previous one, starting from the root node and traversing down the tree.

Keyed Elements: React uses "keys" assigned to each element in the virtual DOM to identify elements that have moved or changed. Keys provide a hint to React about the identity of elements, making it easier to determine which elements should be updated, inserted, or removed.

Efficiency: The algorithm is designed to be efficient, minimizing the number of actual DOM mutations. It tries to group similar operations together and avoid unnecessary updates.

Reconciliation Strategies: React uses different strategies depending on the types of elements and their positions in the tree. It prioritizes updates to the most frequently changing parts of the UI.

By using this diff algorithm, React ensures that the UI updates efficiently, providing a smooth user experience while minimizing unnecessary work for the browser, which is crucial for building responsive and performant web applications.

==> why react is fast?
- It has VDOM
- It has diff algorithms which is very efficient.
- It can do efficient dom manipulations
- It does not touch the actual dom first 
- It compares the changes in vdom and then updates the actual dom.



-----------------------------------------------lec-5--------------------------------

Monolithic and microservices
- There are  two approach to fetch data

1. load - Api - render = 500ms - this is poor apprach
2. load - render - api - render the data - this is better

=> useEffect - its a hooks in react again a normal js funciton written some js logic behine the scene,
- it has two arguments 
1. a callback function
2. a dependencies


=> useEffect - when the page will get loaded on the ui and as soon as it finishes the render cycle then useEffect will get called with the help of callback function.

- if you want to do something after the page loaded we can use useEffect to perform some tasks

- shimmer UI

- if we are changing the state of any part of the component then whole component will get rerender 
eg: if there is a counter component and I am just incresing the value of counter then whole component will get rerender.

- if you are typing something in the input field on every key press teh whole component will get rerender and refresh the ui.

------------------------------------------LECTURE 7 ---------------------------------

useEffect get rerender everytime page gets loaded, if we want to render this once then we pass the array dependencies.

- use hooks inside the component.

TO CREATE THE ROUTER , 
- import createBrowserRouter form react-router-dom 
- create the configuration for the routing
- give the path and

- configuration takes a list of object that defines the path of different pages.
- RouterProvider will provide the routing configuration to the application


- to create a custom error page you can create a component and then imprort the error page in the configuration and show the custom messages.
- we can use useRouterError - this hooks gives the more informatin aobut the error.


=> If you want to fix navbar at every page you will have to use "Outlet" and create a childeren routes for the App. the childen routes will get added to the Outlet component and will get rendered.

=> To create the link you can use anchor tag or Link tag 
- anchor tag - when you use anchor tag it will refresh the whole page and can create the delay 
so its not recommended to use anchor tag in react.

- Link is used to create the link in react , it does not refresh or reloading the whole page . it only changes the routes so quickly , so its better to use Link tag in react.


=> There are two types of Routing in react 
- client side routing
- server side routing

data - cards[2] - card.card. gridElements.infoWithStyle.restaurants.info

useParams -useParams is a hook provided by the React Router library. It is used for accessing route parameters in a functional component. Route parameters are placeholders in the URL that allow you to capture dynamic values from the URL and use them in your components.


- Link is also getting conveted into anchor tag behind the scene.
